"""
Generated Images Gallery
This page displays all images generated by the GPTImage1 agent.
"""

import os
import glob
import datetime
from pathlib import Path
import streamlit as st
from PIL import Image
import sys

# Add the parent directory to the path to import config
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import config

with open("styles.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# Logo in sidebar
st.logo(config.LOGO_TEXT_PATH,
    size="large",
    icon_image=config.LOGO_ICON_PATH
)


# Page title
st.title(f":material/photo_library: Generated Images Gallery")
st.markdown("This gallery displays all images generated by the GPTImage1 agent.")

# Path to the generated images directory
IMAGES_DIR = Path(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) / "generated_images"

def get_image_files():
    """Get all image files from the generated_images directory."""
    # Create the directory if it doesn't exist
    os.makedirs(IMAGES_DIR, exist_ok=True)
    
    # Get all image files
    image_extensions = ["*.png", "*.jpg", "*.jpeg", "*.gif"]
    image_files = []
    
    for ext in image_extensions:
        image_files.extend(glob.glob(os.path.join(IMAGES_DIR, ext)))
    
    # Sort by modification time (newest first)
    image_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
    
    return image_files

def delete_image(image_path):
    """Delete an image file with error handling."""
    try:
        if os.path.exists(image_path):
            os.remove(image_path)
            return True, f"Successfully deleted {os.path.basename(image_path)}"
        return False, "File not found"
    except Exception as e:
        return False, f"Error deleting file: {str(e)}"

def display_image_gallery(image_files):
    """Display images in a grid layout."""
    if not image_files:
        st.info("No images have been generated yet. Try generating an image using the GPTImage1 agent!")
        return
    
    # Display image count
    st.markdown(f"### Found {len(image_files)} generated images")
    
    # Create columns for the gallery (3 images per row)
    cols = st.columns(3)
    
    # Display images in the columns
    for i, image_file in enumerate(image_files):
        col_idx = i % 3
        with cols[col_idx]:
            try:
                # Get image metadata
                filename = os.path.basename(image_file)
                mod_time = os.path.getmtime(image_file)
                mod_time_str = datetime.datetime.fromtimestamp(mod_time).strftime("%Y-%m-%d %H:%M:%S")
                
                # Open and display the image
                img = Image.open(image_file)
                st.image(img, caption=f"{filename}", use_container_width=True)
                
                # Display metadata
                st.markdown(f"**Created:** {mod_time_str}")
                
                # Create columns for the action buttons
                col1, col2, col3 = st.columns([1, 1, 1])
                
                # Add a button to view the full image
                with col1:
                    if st.button("  :material/search:  ", key=f"view_{i}"):
                        try:
                            # First approach: Try using a direct file URL (works in some browsers)
                            image_url = os.path.abspath(image_file).replace("\\", "/")
                            file_url = f"file:///{image_url}"
                            
                            # Use Python's built-in webbrowser module to open the image directly
                            import webbrowser
                            webbrowser.open(file_url)
                            
                            # Show success message
                            st.success(f"Opening image in a new window: {filename}")
                            
                        except Exception as e:
                            st.error(f"Error opening image: {e}")
                            
                            # Fallback: Display the image in a larger format inline
                            st.warning("Could not open in a new window. Displaying larger version here:")
                            st.image(img, caption=f"{filename} ({img.width}×{img.height} pixels)", use_container_width=False)
                
                # Add a download button
                with col2:
                    with open(image_file, "rb") as file:
                        st.download_button(
                            label=":material/download:",
                            data=file,
                            file_name=filename,
                            mime=f"image/{os.path.splitext(filename)[1][1:]}",
                            key=f"download_{i}", 
                            use_container_width=True
                        )
                
                # Add a delete button with confirmation
                with col3:
                    if st.button(":material/delete:", key=f"delete_{i}", type="primary"):
                        st.session_state['delete_confirm'] = i
                
                # Show confirmation dialog if delete was clicked
                if st.session_state.get('delete_confirm') == i:
                    st.warning("Are you sure you want to delete this image? This action cannot be undone.")
                    confirm_col1, confirm_col2 = st.columns(2)
                    with confirm_col1:
                        if st.button(":material/check_circle: Yes, delete it", key=f"confirm_delete_{i}", type="secondary"):
                            success, message = delete_image(image_file)
                            if success:
                                st.success(message)
                                # Remove the file from the list and rerun
                                if image_file in image_files:
                                    image_files.remove(image_file)
                                del st.session_state['delete_confirm']
                                st.rerun()
                            else:
                                st.error(message)
                    with confirm_col2:
                        if st.button(":material/cancel: Cancel", key=f"cancel_delete_{i}", type="primary"):
                            if 'delete_confirm' in st.session_state:
                                del st.session_state['delete_confirm']
                            st.rerun()
                
                st.markdown("---")
            except Exception as e:
                st.error(f"Error displaying image {filename}: {e}")

def main():
    """Main function to run the Streamlit app."""
    # Initialize session state for delete confirmation if not exists
    if 'delete_confirm' not in st.session_state:
        st.session_state['delete_confirm'] = None
    
    # Get all image files
    image_files = get_image_files()
    
    # Display the image gallery
    display_image_gallery(image_files)
    
    # Add a refresh button
    if st.button(":material/refresh: Refresh Gallery"):
        st.session_state['delete_confirm'] = None
        st.rerun()

if __name__ == "__main__":
    main()

# Footer
st.markdown("---")
st.sidebar.markdown(f"© {config.APP_NAME} | Made with :material/favorite: by [{config.COMPANY}]({config.COMPANY_URL})")
